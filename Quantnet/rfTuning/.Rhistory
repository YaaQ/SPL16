tcorssprod
tcrossprod
%*%
'%*%'
mean
mean.Date()
?mean.Date()
mean.default()
mean.default
aa = matrix(rnorm(1e8),ncol = 1e4)
aa = matrix(rnorm(1e8))
system.time(mean(aa))
system.time(mean.default(aa))
system.time(.Internal(mean(aa)))
colMeans()
colMeans
?.Internal
'name'
system.time(.Primitive(mean(aa)))
?.Primitive
mean.default()
mean.default
.Primitive(mean)
.Primitive('mean')
.Primitive('lapply')
.Internal(lapply)
length
.Primitive('*')
.Internal('*')
.aa Primitive('*') aa
aa .Primitive('*') aa
aa * aa
system.time(aa*aa*aa*aa*aa*aa)
system.time(Vpower(aa,6))
system.time(aa^6)
Vpower = function(x, n = 2) {  # this can be faster than '^'
if (n <= 1) stop('n must be bigger than 1.')
if (n == 2) return(x*x)
else return(x*Vpower(x,n-1))
}
system.time(Vpower(aa,6))
system.time(Vpower(aa,6))
.Primitive('^')
dim(aa)
.Primitive('%*%')
split
?split
.Primitive('split')
.Internal(split())
?data.matrix
data.matrix
seq_len()
seq_len
seq_len(10)
aa = seq_len(1e8)
aa = seq_len(1e9)
aa = matrix(aa,ncol = length(aa)/2)
system.time(bb = length(aa))
system.time(length(aa))
system.time(mean(aa))
mean(aa)
mean.default(aa)
system.time(mean.default(aa))
aggregate.data.frame
aggregate
aggregate.ts
library(plyr)
aaply
laply
llply
loop_apply
?loop_apply
system.time(colMeans(aa,2))
gc()
system.time(apply(aa,2,mean.default))
colMeans
system.time(.Internal(colMeans(aa,2)))
.Internal(colMeans)
.Internal('colMeans')
aa = 1:1e8
system.time(apply(aa,2,mean.default))
aa = matrix(aa,nol = 1e4)
aa = matrix(aa,ncol = 1e4)
system.time(apply(aa,2,mean.default))
system.time(colMeans(aa,2))
system.time(colMeans(data.frame(aa)))
d_aa = data.frame(aa)
colMeans(d_aa)
system.time(colMeans(d_aa))
system.time(colMeans(aa))
system.time(lapply(d_aa,mean.default))
system.time(lapply(d_aa,mean))
mean.default(d_aa[[1]])
system.time(mean.default(d_aa[[1]]))
system.time(mean.default(aa[,1]))
?aggregate.default
aggregate.default
aggregate
aggregate.data.frame
dendrapply
a = array(rpois(10^8,5),c(100,100,10000))
start1 = proc.time()
for (i in 1:10000) c[[i]] = a[,,i]
spent1 = proc.time() - start1
gc()
c = list()
start1 = proc.time()
for (i in 1:10000) c[[i]] = a[,,i]
spent1 = proc.time() - start1
gc()
start2 = proc.time()
bb = alply(a,3)
spent2 = proc.time() - start2   # this is fast!
library(plyr)
gc()
start2 = proc.time()
bb = alply(a,3)
spent2 = proc.time() - start2   # this is fast!
spent2
spent1
b = array(rpois(10^8,5),c(10000,10000))
gc()
c = list()
start1 = proc.time()
for (i in 1:10000) c[[i]] = b[,i]
spent1 = proc.time() - start1
library(plyr)
gc()
start2 = proc.time()
bb = alply(b,2)
spent2 = proc.time() - start2   # this is fast!
spent1
spent2
c = rpois(1e8,5)
gc()
cc = list()
start1 = proc.time()
for (i in seq_len(c)) cc[[i]] = c[i]
spent1 = proc.time() - start1
start2 = proc.time()
bb = as.list(c)
spent2 = proc.time() - start1
spent2
bb[[1]]
head(bb)
?seq_len
rm(bb)
gc()
cc = list()
start1 = proc.time()
for (i in seq_len(length(c))) cc[[i]] = c[i]
library(Matrix)
library(plyr)
library(dplyr)
rm(list = ls())
## setting up basic matrix using base matrix type
rho = -0.2
sig_e = 0.3
FF = matrix(c(rho, 1, 0, 0, 0, 1, 0, 0, 0), ncol = 3)
In = diag(9)
QQ = matrix(c(sig_e^2, 0, 0, 0, 0, 0, 0, 0, 0), ncol = 3)
vecQQ = matrix(QQ, ncol = 1)
#as(QQ, 'TsparseMatrix')
#vecQQ = Matrix(c(sig_e^2, 0, 0, 0, 0, 0, 0, 0, 0), ncol = 1)
#as(QQ, 'sparseVector')
#Matrix(c(sig_e^2, 0, 0, 0, 0, 0, 0, 0, 0), ncol = 1)
PP = solve(In - kronecker(FF, FF), vecQQ)
PP1 = forwardsolve(In - kronecker(FF, FF), vecQQ)
all.equal(PP, PP1)
identical(PP, PP1)
## do this to multi individuals using
nn = 30
I3 = matrix(0, ncol = 3, nrow = 3)
Inn = diag(nn)
bigF = kronecker(Inn, FF)
aa = nrow(bigF)
bigIn = diag(aa^2)
bigQ = diag(x = rnorm(nn))
bigQ = kronecker(bigQ, I3)
vecbigQ = matrix(bigQ, ncol = 1)
PP = solve(bigIn - kronecker(bigF, bigF), vecbigQ)
PP = forwardsolve(bigIn - kronecker(bigF, bigF), vecbigQ)
identical(PP, PP1)
all.equal(PP, PP1)
dim(PP)
dim(PP1)
PP1 = forwardsolve(bigIn - kronecker(bigF, bigF), vecbigQ)
identical(PP, PP1)
all.equal(PP, PP1)
spbigIn = Matrix(bigIn)
spbigIn1 = Matrix(bigIn)
spbigIn  = Diagonal(n = aa^2)
all.equal(spbigIn, spbigIn1)
spbigIn  = Diagonal(n = aa^2)
spInn = Diagonal(n = nn)
spbigF = kronecker(spInn, FF)
spbigF = kronecker(spInn, as(FF, 'TriangleMatrix')
spbigF = kronecker(spInn, as(FF, 'TriangleMatrix'))
spbigF = kronecker(spInn, as(FF, 'TriangularMatrix'))
spbigF = kronecker(spInn, as(Matrix(FF), 'TriangularMatrix'))
spbigF = kronecker(spInn, as(Matrix(FF), 'triangularMatrix'))
spcbigQ = Matrix(vecbigQ)
spbigIn  = Diagonal(n = aa^2)
spInn = Diagonal(n = nn)
spbigF = kronecker(spInn, FF)
spvbigQ = Matrix(vecbigQ)
PP = solve(spbigIn - kronecker(spbigF, spbigF), spvbigQ)
all.equal(PP, PP1)
identical(PP, PP1)
all.equal(PP, as(PP1, 'matrix')
)
identical(PP, as(PP1, 'matrix'))
PP[1:10, 1:5]
dim(PP)
PP[1:10,]
PP1[1:10]
print(image(PP))
image(PP)
summary(PP1)
F
FF
bigQ[1:10, 1:5]
dim(bigQ)
nn
aa = rnorm(nn)
head(aa)
?diag
bigQ = diag(x = rnorm(nn))
nn = 30
I3 = matrix(0, ncol = 3, nrow = 3); I3[1, 1] = 1
Inn = diag(nn)
bigF = kronecker(Inn, FF)
aa = nrow(bigF)
bigIn = diag(aa^2)
bigQ = diag(x = rnorm(nn))
bigQ = kronecker(bigQ, I3)
vecbigQ = matrix(bigQ, ncol = 1)
# PP = solve(bigIn - kronecker(bigF, bigF), vecbigQ)  # too slow
PP1 = forwardsolve(bigIn - kronecker(bigF, bigF), vecbigQ) # fast
spbigIn  = Diagonal(n = aa^2)
spInn = Diagonal(n = nn)
spbigF = kronecker(spInn, FF)
spvbigQ = Matrix(vecbigQ)
PP = solve(spbigIn - kronecker(spbigF, spbigF), spvbigQ)
all.equal(PP, as(PP1, 'matrix'))
identical(PP, as(PP1, 'matrix'))
all.equal(PP1, as(PP, 'matrix'))
identical(PP1, as(PP, 'matrix'))
dim(PP)
dim(PP1)
head(PP)
head(PP1)
image(PP)
image(PP1)
str(PP)
str(PP1)
?gmm
??gmm
library(Matrix)
library(plyr)
library(dplyr)
rm(list = ls())
## setting up basic matrix using base matrix type
rho = -0.2
sig_e = 0.3
FF = matrix(c(rho, 1, 0, 0, 0, 1, 0, 0, 0), ncol = 3)
In = diag(9)
QQ = matrix(c(sig_e^2, 0, 0, 0, 0, 0, 0, 0, 0), ncol = 3)
vecQQ = matrix(QQ, ncol = 1)
#as(QQ, 'TsparseMatrix')
#vecQQ = Matrix(c(sig_e^2, 0, 0, 0, 0, 0, 0, 0, 0), ncol = 1)
#as(QQ, 'sparseVector')
#Matrix(c(sig_e^2, 0, 0, 0, 0, 0, 0, 0, 0), ncol = 1)
PP = solve(In - kronecker(FF, FF), vecQQ)
PP1 = forwardsolve(In - kronecker(FF, FF), vecQQ)
all.equal(PP, PP1)
identical(PP, PP1)
## do this to multi individuals using
nn = 30
I3 = matrix(0, ncol = 3, nrow = 3); I3[1, 1] = 1
Inn = diag(nn)
bigF = kronecker(Inn, FF)
aa = nrow(bigF)
bigIn = diag(aa^2)
bigQ = diag(x = rnorm(nn))
bigQ = kronecker(bigQ, I3)
vecbigQ = matrix(bigQ, ncol = 1)
# PP = solve(bigIn - kronecker(bigF, bigF), vecbigQ)  # too slow
PP1 = forwardsolve(bigIn - kronecker(bigF, bigF), vecbigQ) # fast
#identical(PP, PP1)
#all.equal(PP, PP1)
## for sparse matrix
spbigIn  = Diagonal(n = aa^2)
spInn = Diagonal(n = nn)
spbigF = kronecker(spInn, FF)
spvbigQ = Matrix(vecbigQ)
PP = solve(spbigIn - kronecker(spbigF, spbigF), spvbigQ)
all.equal(PP1, as(PP, 'matrix'))
identical(PP1, as(PP, 'matrix'))
nn = 30
I3 = matrix(0, ncol = 3, nrow = 3); I3[1, 1] = 1
Inn = diag(nn)
bigF = kronecker(Inn, FF)
aa = nrow(bigF)
bigIn = diag(aa^2)
bigQ = diag(x = rnorm(nn))
bigQ = kronecker(bigQ, I3)
vecbigQ = matrix(bigQ, ncol = 1)
# PP = solve(bigIn - kronecker(bigF, bigF), vecbigQ)  # too slow
PP1 = forwardsolve(bigIn - kronecker(bigF, bigF), vecbigQ) # fast
spbigIn  = Diagonal(n = aa^2)
spInn = Diagonal(n = nn)
spbigF = kronecker(spInn, FF)
spvbigQ = Matrix(vecbigQ)
PP = solve(spbigIn - kronecker(spbigF, spbigF), spvbigQ)
all.equal(PP1, as(PP, 'matrix'))
identical(PP1, as(PP, 'matrix'))
spbigIn  = Diagonal(n = aa^2)
spInn = Diagonal(n = nn)
spbigF = kronecker(spInn, FF)
spvbigQ = Matrix(vecbigQ)
PP = solve(spbigIn - kronecker(spbigF, spbigF), spvbigQ)
all.equal(PP1, as(PP, 'matrix'))
identical(PP1, as(PP, 'matrix'))
PP = solve(spbigIn - kronecker(spbigF, spbigF), spvbigQ)
PP2 = solve(as(spbigIn - kronecker(spbigF, spbigF), 'triangularMatrix'), spvbigQ)
PP = solve(spbigIn - kronecker(spbigF, spbigF), spvbigQ)
PP2 = solve(as(spbigIn - kronecker(spbigF, spbigF), 'triangularMatrix'), spvbigQ)
?microbenchmark
??microbenchmark
all.equal(PP, PP2)
identical(PP, PP2)
head(PP)
head(PP1)
str(PP)
str(PP1)
str(PP2)
?repeat
?lapply
compare = function(f) {
system.time(replicate(n = 100, expr = f))
}
compare(solve(spbigIn - kronecker(spbigF, spbigF), spvbigQ))
compare(solve(as(spbigIn - kronecker(spbigF, spbigF), 'triangularMatrix'), spvbigQ), spvbigQ))
compare(solve(as(spbigIn - kronecker(spbigF, spbigF), 'triangularMatrix'), spvbigQ), spvbigQ)
compare(solve(as(spbigIn - kronecker(spbigF, spbigF), 'triangularMatrix'), spvbigQ))
compare(solve(spbigIn - kronecker(spbigF, spbigF), spvbigQ))
compare(solve(as(spbigIn - kronecker(spbigF, spbigF), 'triangularMatrix'), spvbigQ))
compare = function(f) {
system.time(replicate(n = 1000, expr = f))
}
compare(solve(spbigIn - kronecker(spbigF, spbigF), spvbigQ))
compare(solve(as(spbigIn - kronecker(spbigF, spbigF), 'triangularMatrix'), spvbigQ))
replicate(1000, solve(spbigIn - kronecker(spbigF, spbigF), spvbigQ))
compare = function(x) {
system.time(replicate(n = 1000, expr = solve(x, spvbigQ)))
}
compare(spbigIn - kronecker(spbigF, spbigF))
compare(as(spbigIn - kronecker(spbigF, spbigF), 'triangularMatrix'))
compare(spbigIn - kronecker(spbigF, spbigF))
compare(as(spbigIn - kronecker(spbigF, spbigF), 'triangularMatrix'))
aa = matrix(rnorm(2500), ncol = 50)
AA = Matrix(aa)
system.time(replicate(100, aa %*% aa))
system.time(replicate(100, function(x = aa) x %*% x))
system.time(replicate(1000, function(x = aa) x %*% x))
system.time(aa %*% aa)
rr = 500
aa = matrix(rnorm(rr^2), ncol = rr)
AA = Matrix(aa)
system.time(replicate(100, function(x = aa) x %*% x))
system.time(aa %*% aa)
system.time(AA %*% AA)
system.time(aa %*% aa)
system.time(AA %*% AA)
system.time(aa %*% aa)
system.time(AA %*% AA)
rr = 500
aa = matrix(rnorm(rr^2), ncol = rr)
AA = Matrix(aa)
system.time(aa %*% aa)
system.time(AA %*% AA)
rr = 500
aa = matrix(rnorm(rr^2), ncol = rr)
AA = Matrix(aa)
system.time(aa %*% aa)
system.time(AA %*% AA)
system.time(AA %*% aa)
system.time(aa %*% aa)
system.time(AA %*% aa)
system.time(aa %*% aa)
system.time(AA %*% aa)
setwd('F:/PHD/IRTG/courses/SPLQuantlet/random_forest_turning')
getwd()
setwd('F:/PHD/IRTG/courses/SPLQuantlet/random_forest_turning')
?setwd
setwd('F:/PHD/IRTG/courses/SPL/Quantlet/random_forest_turning')
library(h2o)
# source("load_ames_data.R")
# source("utils/quick_preprocessing.R")
# source("utils/performanceMetrics.R")  # to get performance metrics
load('basic_processing.RData')
result_path <- "Modeling/Results/rf/rf_pca"
## Create an H2O cloud
h2o.init(
nthreads=-1,            ## -1: use all available threads (use all cores)
max_mem_size = "2G")    ## specify the memory size for the H2O cloud
h2o.removeAll() # Clean slate - just in case the cluster was already running
# get preprocessed training set
train <- basic_data$train
test <- basic_data$test
# specify repetions and number of folds
repetitions <- 2
k_folds <- 5
sample(1:1000, 2)
# convert into h20_objects
train_h2o <- as.h2o(train)
# sepecify columns of inputs and labels
col_label <- which(colnames(train) == "y")
col_input <- which(colnames(train) != "y")
# specify grid
rfGrid <- list(mtries = seq(10,30,5),
ntrees = 500,
max_depth = seq(5,25,5),
sample_rate = seq(0.6,0.8,0.2),
stopping_metric = "MSE",
stopping_rounds = 20
)
# draw new seeds in order to run a different cv split each repetition
seeds <- sample(1:1000,repetitions)
rfFit = list()
tuning_results = list()
for(t in 1:repetitions){
#tune random forest with h2o
rfFit[[i]] <- h2o.grid("randomForest",
grid_id = "gridSearch",
x = col_input,
y = col_label,
training_frame = train_h2o,
hyper_params = rfGrid,
nfolds = k_folds,
is_supervised = TRUE,
seed = seeds[1]
)
# get tuning results and save them as csv
tuning_results[[i]] <- h2o.getGrid(grid_id = "gridSearch", sort_by = "rmse")
# write.csv(tuning_results@summary_table,file = paste(result_path,".csv", sep="_"))
}
load('basic_processing.RData')
result_path <- "Modeling/Results/rf/rf_pca"
## Create an H2O cloud
h2o.init(
nthreads=-1,            ## -1: use all available threads (use all cores)
max_mem_size = "2G")    ## specify the memory size for the H2O cloud
h2o.removeAll() # Clean slate - just in case the cluster was already running
# get preprocessed training set
train <- basic_data$train
test <- basic_data$test
# specify repetions and number of folds
repetitions <- 2
k_folds <- 5
# convert into h20_objects
train_h2o <- as.h2o(train)
# sepecify columns of inputs and labels
col_label <- which(colnames(train) == "y")
col_input <- which(colnames(train) != "y")
# specify grid
rfGrid <- list(mtries = seq(10,30,5),
ntrees = 500,
max_depth = seq(5,25,5),
sample_rate = seq(0.6,0.8,0.2),
stopping_metric = "MSE",
stopping_rounds = 20
)
# draw new seeds in order to run a different cv split each repetition
seeds <- sample(1:1000,repetitions)
# define variables to store outcomes
rfFit = list()
tuning_results = list()
for(t in 1:repetitions){
#tune random forest with h2o
rfFit[[t]] <- h2o.grid("randomForest",
grid_id = "gridSearch",
x = col_input,
y = col_label,
training_frame = train_h2o,
hyper_params = rfGrid,
nfolds = k_folds,
is_supervised = TRUE,
seed = seeds[1]
)
# get tuning results and save them as csv
tuning_results[[t]] <- h2o.getGrid(grid_id = "gridSearch", sort_by = "rmse")
# write.csv(tuning_results@summary_table,file = paste(result_path,".csv", sep="_"))
}
rm(list = ls())
library(h2o)
load('basic_processing.RData')
h2o.init(
nthreads=-1,            ## -1: use all available threads (use all cores)
max_mem_size = "2G")    ## specify the memory size for the H2O cloud
h2o.removeAll() # Clean slate - just in case the cluster was already
train <- basic_data$train
test <- basic_data$test
# specify repetions and number of folds
repetitions <- 2
k_folds <- 5
# convert into h20_objects
train_h2o <- as.h2o(train)
# sepecify columns of inputs and labels
col_label <- which(colnames(train) == "y")
col_input <- which(colnames(train) != "y")
